apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'spring-boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "org.sonarqube"
//apply from: 'codenarc.gradle'
apply from: 'cobertura.gradle'

buildscript {
	repositories {
	    mavenCentral()
		//all dependencies for gssp microservices will be pulled from this instance of artifactory
				maven {
		credentials {
          username "${artifactory_user}"
          password "${artifactory_password}"
        }
		url "${artifactory_contextUrl}/metlife-ms-virtual" }
	//maven {
	//	credentials {
        //  username "${artifactory_user}"
        //  password "${artifactory_password}"
       // }
	//	url "${artifactory_contextUrl}/libs-snapshot" }
	}

	//the following need to be in the buildscript for dependency resolution to work properly
	dependencies {
		//buildscript dependencies
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE")
		classpath("net.saliman:gradle-cobertura-plugin:2.3.0")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5")
	}

	configurations.all {
		exclude module: 'logback-classic'
		resolutionStrategy {
			cacheChangingModulesFor 0, 'seconds'
			cacheDynamicVersionsFor 0, 'seconds'
		}
	}
}

version = version = hasProperty('buildVersion') ? "${buildVersion}" : '0.1.0' //if you feel this needs to change, contact phil phelm@metlife.com
group = 'com.metlife.gssp'//if you feel this needs to change, contact phil phelm@metlife.com

description = "This microservice is used to retrieve the template based upon the template Id and generate the hydrated data "

springBoot {
	mainClass = "com.metlife.gssp.Application"
	executable = true
}

//publishName
def publishName = 'metlife-smd-gssp-groupsetup-service'

eclipse.project {
	natures 'org.springsource.ide.eclipse.gradle.core.nature'
}

//****** USE THIS TASK TO RUN THE PROJECT LOCALLY via GRADLE ******
task bootRunLocal_templateService <<{
  bootRun { systemProperty "spring.profiles.active", "local" }
}
bootRunLocal_templateService.finalizedBy bootRun

configurations.all {
  exclude module: 'log4j'
  exclude module: 'slf4j-log4j12'
  exclude module: 'slf4j-simple'
//	exclude module: 'logback-core'
//	exclude module: 'logback-classic'
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceCompatibility = 1.8 //we are using jdk 1.8
targetCompatibility = 1.8

repositories {
	//all dependencies should be pulled from our internal artifactory instance.
  ////if you need dependencies not in this repository, contact phil phelm@metlife.com
        mavenCentral()
		maven {
		credentials {
          username "${artifactory_user}"
          password "${artifactory_password}"
        }
		url "${artifactory_contextUrl}/metlife-ms-virtual" }
	//maven {
	//	credentials {
      //    username "${artifactory_user}"
      //    password "${artifactory_password}"
      //  }
	//	url "${artifactory_contextUrl}/libs-snapshot" }
}

dependencyManagement {
	imports {
		mavenBom 'com.metlife.gssp:gssp-framework-bom:0.1.10-SNAPSHOT'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile ('org.springframework.boot:spring-boot-starter-actuator')
	compile("org.springframework.cloud:spring-cloud-starter-hystrix")
	compile("org.springframework.cloud:spring-cloud-starter-config")
	compile("org.springframework.cloud:spring-cloud-config-client")
	compile("org.springframework.cloud:spring-cloud-starter-eureka")
	//compile ('com.metlife.framework:decision-engine:0.0.9.7.6-SNAPSHOT')
	compile ('com.metlife.framework:decision-engine') {    changing=true  }
	compile 'io.reactivex:rxjava:1.1.9'
	compile 'org.springframework.cloud:spring-cloud-starter-sleuth'

	compile ('com.metlife.gssp.persistence:gssp-persistence')
	compile ('com.metlife.gssp.common:gssp-common-utils') { changing=true }
	compile ('org.json:json')
	compile 'org.codehaus.groovy:groovy-all'
	compile ('com.metlife.gssp.logging:gssp-logging')
	compile 'com.github.jknack:handlebars:4.0.6'
	compile ('com.metlife.gssp.configuration:gssp-configuration')
	compile ('com.google.code.gson:gson')
	
	
	compile ('dom4j:dom4j:1.6')	{changing=true}
	compile ('org.apache.poi:poi:3.9')	{changing=true}
	compile ('org.apache.poi:poi-ooxml:3.9')	{changing=true}
	compile ('org.apache.poi:poi-ooxml-schemas:3.9')	{changing=true}
	compile ('org.apache.xmlbeans:xmlbeans:2.6.0')	{changing=true}


	//unit test dependencies
	testCompile 'com.jayway.jsonpath:json-path-assert'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.springframework:spring-test'
	testCompile 'org.mockito:mockito-core'
	testCompile 'net.therore.spring.mockito:therore-spring-mockito'

	//Codenarc
	//codenarc group: 'org.codenarc', name: 'CodeNarc', version: '1.0'

	//spock
	testCompile "org.spockframework:spock-core"
	testRuntime "cglib:cglib-nodep"          // allows mocking of classes (in addition to interfaces)
	testRuntime "org.objenesis:objenesis"    // allows mocking of classes without default constructor (together with CGLIB)
}

sourceSets {
ignorefailures=true
	main {
		groovy { srcDirs = ['src/dynamic/workflow']}
	}

	test {
		groovy { srcDirs = ['src/test/groovy']}
		java { srcDirs = ['src/test/java']}
	}
}

test {
	testLogging {
		// Show that tests are run in the command-line output
		events 'started', 'passed', 'skipped', 'failed'
	}
}

jar {
  baseName = publishName
  version = version
}

task tar(type: Tar) {
	classifier = 'src'
	baseName = publishName
	destinationDir = buildDir
	from projectDir
	include 'src/dynamic/**/*','src/templates/**/*','src/templates/*'
	extension = 'tgz'
	compression = Compression.GZIP
}

// Publish build artifacts to an Maven Repository
publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId group //this should not change
			artifactId publishName
			version version //pulled from above
			from components.java
		}
		mavenJava(MavenPublication) {
			groupId group //this should not change
			artifactId publishName
			version version //pulled from above

			artifact tar
		  }
	}
	repositories {
		maven {
		credentials {
          username "${artifactory_user}"
          password "${artifactory_password}"
        }
		url "${artifactory_contextUrl}/metlife-lib-release" }
	maven {
		credentials {
          username "${artifactory_user}"
          password "${artifactory_password}"
        }
		url "${artifactory_contextUrl}/metlife-lib-snapshot" }
	}
}
